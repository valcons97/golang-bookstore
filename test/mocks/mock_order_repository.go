// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/order_repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	model "bookstore/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// AddOrUpdateCart mocks base method.
func (m *MockOrderRepository) AddOrUpdateCart(orderID, bookID, quantity int, subtotal int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOrUpdateCart", orderID, bookID, quantity, subtotal)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOrUpdateCart indicates an expected call of AddOrUpdateCart.
func (mr *MockOrderRepositoryMockRecorder) AddOrUpdateCart(orderID, bookID, quantity, subtotal interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOrUpdateCart", reflect.TypeOf((*MockOrderRepository)(nil).AddOrUpdateCart), orderID, bookID, quantity, subtotal)
}

// CreateOrderIfNotExists mocks base method.
func (m *MockOrderRepository) CreateOrderIfNotExists(customerID int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrderIfNotExists", customerID)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrderIfNotExists indicates an expected call of CreateOrderIfNotExists.
func (mr *MockOrderRepositoryMockRecorder) CreateOrderIfNotExists(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrderIfNotExists", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrderIfNotExists), customerID)
}

// GetCart mocks base method.
func (m *MockOrderRepository) GetCart(orderId int) (*model.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCart", orderId)
	ret0, _ := ret[0].(*model.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCart indicates an expected call of GetCart.
func (mr *MockOrderRepositoryMockRecorder) GetCart(orderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCart", reflect.TypeOf((*MockOrderRepository)(nil).GetCart), orderId)
}

// GetOrderHistory mocks base method.
func (m *MockOrderRepository) GetOrderHistory(customerID, limit, page int) ([]model.OrderResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderHistory", customerID, limit, page)
	ret0, _ := ret[0].([]model.OrderResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderHistory indicates an expected call of GetOrderHistory.
func (mr *MockOrderRepositoryMockRecorder) GetOrderHistory(customerID, limit, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderHistory", reflect.TypeOf((*MockOrderRepository)(nil).GetOrderHistory), customerID, limit, page)
}

// PayOrder mocks base method.
func (m *MockOrderRepository) PayOrder(customerID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PayOrder", customerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// PayOrder indicates an expected call of PayOrder.
func (mr *MockOrderRepositoryMockRecorder) PayOrder(customerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PayOrder", reflect.TypeOf((*MockOrderRepository)(nil).PayOrder), customerID)
}

// RemoveFromCart mocks base method.
func (m *MockOrderRepository) RemoveFromCart(orderId, bookId int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromCart", orderId, bookId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromCart indicates an expected call of RemoveFromCart.
func (mr *MockOrderRepositoryMockRecorder) RemoveFromCart(orderId, bookId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromCart", reflect.TypeOf((*MockOrderRepository)(nil).RemoveFromCart), orderId, bookId)
}
